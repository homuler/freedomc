module Handler.FC.Typing.Editor where

import Import
import qualified FC.Field.Typing as FCFT
import qualified FC.Data.Typing as FCDT
import qualified FC.Data.Music as FCDM
import qualified FC.Form.Fields as FCField
import qualified FC.Typing.IO as FCTI
import qualified GHC.List as GL
import Control.Monad
import Data.Maybe
import Data.Text
import Data.Text.IO
import System.FilePath

fcMusicEditorForm :: Html ->
                     MForm Handler (FormResult FCDT.TypingMusicInfo, Widget)
fcMusicEditorForm extra = do
  mTitle <- lookupSession "mTitle"
  mMusician <- lookupSession "mMusician"
  mGenre  <- lookupSession "mGenre"
  mFormat <- lookupSession "mFormat"
  mSoundSrc <- lookupSession "mSoundSrc"
  mLyricSrc <- lookupSession "mLyricSrc"
  mPictureSrc <- lookupSession "mPictureSrc"
  mConfigSrc <- lookupSession "mConfigSrc"
  $logInfo $ append "genre = " $ pack $ show mGenre
  lyrics <- case mLyricSrc of
    Just lyricSrc -> liftIO . readLyrics $ unpack lyricSrc
    Nothing -> return []
  let musicFormat = fromMaybe FCDM.Video $ (read . unpack) <$> mFormat
      musicGenre  = (read . unpack) <$> mGenre
  $logInfo $ append "genre = " $ pack $ show musicGenre
  (titleRes, titleView) <-
    mreq textField
    (bootstrapFieldSettings "Music Title") $ mTitle
  (musicianRes, musicianView) <-
    mreq textField
    (bootstrapFieldSettings "Musician Name") $ mMusician
  (genreRes, genreView) <-
    mopt (FCField.multiCheckBoxList FCDM.genres)
    "Genre" musicGenre
  (soundRes, soundView) <-
    mreq textField
    (readOnlyFieldSettings "Music Source Path") $ mSoundSrc
  (lyricRes, lyricView) <-
    mreq textField
    (readOnlyFieldSettings "Lyric File Path") $ mLyricSrc
  (pictureRes, pictureView) <-
    mopt textField
    (readOnlyFieldSettings "Picture File Path") $
    ((read . unpack) <$> mPictureSrc :: Maybe (Maybe Text))
  let lyricPairs = GL.zip [1..] lyrics
  pfields <- forM lyricPairs
             (\(i, t) -> mreq (FCFT.problemField t i) "Problem Info"
                         $ Just $ FCDT.ProblemInfo t t 0 0)
  let (problemResList, problemsView) = unzip pfields
      problemsRes = GL.foldr
                    (\x acc -> (:) <$> x <*> acc)
                    (FormSuccess []) problemResList
      tmInfoRes = FCDT.TypingMusicInfo <$> titleRes
                                       <*> musicianRes
                                       <*> genreRes
                                       <*> (FormSuccess $ fromJust mFormat)
                                       <*> (unpack <$> soundRes)
                                       <*> (unpack <$> lyricRes)
                                       <*> ((unpack <$>) <$> pictureRes)
                                       <*> problemsRes
      widget = $(widgetFile "fc/fc-music-editor-form")
  return (tmInfoRes, widget)

getFCMusicEditorR :: Text -> Handler Html
getFCMusicEditorR musicTitle = do
  ((result, widget), enctype) <- runFormPost fcMusicEditorForm
  defaultLayout $ do
    setTitle "FC -Music Editor-"
    addScript $StaticR js_fc_util_js
    addScript $StaticR js_fc_music_editor_js
    $(widgetFile "fc/fc-music-editor")

postFCMusicEditorR :: Text -> Handler Html
postFCMusicEditorR musicTitle = do
  ((result, widget), enctype) <- runFormPost fcMusicEditorForm
  case result of
    FormSuccess musicInfo -> do
      let targetDir = takeDirectory $ FCDT.lyricSrc musicInfo
          jsonPath = combine targetDir $ (unpack musicTitle) ++ ".json"
      mFormat <- lookupSession "mFormat"
      liftIO $ FCTI.saveConfigFile musicInfo jsonPath
      _ <- runDB $ insert $
        FCTypingMusic
        (FCDT.title musicInfo)
        (FCDT.musician musicInfo)
        ((GL.map $ pack . show) <$> FCDT.genre musicInfo)
        (fromJust mFormat)
        (pack $ FCDT.musicSrc musicInfo)
        (pack $ FCDT.lyricSrc musicInfo)
        (pack <$> FCDT.pictureSrc musicInfo)
        (pack jsonPath)
      redirect FCTypingR
    FormFailure text -> do
      $logInfo $ "Post failed."
      $logInfo $ pack $ show text
      setMessage "Music Config Data can't be posted."
      redirect $ FCMusicEditorR musicTitle
    FormMissing -> do
      $logInfo $ "Form Missing!"
      setMessage "Music Config Data is Missing."
      redirect $ FCMusicEditorR musicTitle

readLyrics :: FilePath -> IO [Text]
readLyrics path = do
  lyrics <- readFile path
  return $ GL.filter (not . Data.Text.null) $ Data.Text.lines lyrics
