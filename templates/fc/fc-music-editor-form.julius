var fc = fc || {};
fc.controller = {};
fc.musicEditor = {};

(function(ns){
    ns.bind = function(soundElem){
        soundElem.addEventListener("canplaythrough", canplaythrough, false);
    };
    ns.showCurrentTime = function(soundElem, showElem){
        showElem.innerHTML = soundElem.currentTime;
    };
    ns.getCurrentTime = function(soundElem, d){
        var val = parseFloat(soundElem.currentTime) * (Math.pow(10, d));
        val = Math.round(val);
        val /= Math.pow(10, d);
        return val;
    };
    ns.inputCurrentTime = function(soundElem, showElem, d){
        var val = ns.getCurrentTime(soundElem, d);
        showElem.value = val;
    };
})(fc.controller = fc.controller || {});

(function(ns){
    ns.settings = {
        timeDigits: 3
    };

    ns.nodes = {
        problemNodes: null,
        soundNode: null,
        startNodes: null,
        stopNodes: null,
        focusNumNode: null,
    };
    ns.status = {};
    ns.init = function(){
        ns.nodes.problemNodes = document.getElementsByClassName("problem");
        ns.nodes.soundNode = document.getElementById("fc-music");
        ns.nodes.startNodes = document.getElementsByClassName("start-time");
        ns.nodes.stopNodes = document.getElementsByClassName("end-time");
        ns.nodes.focusNumNode = document.getElementById("focusNum");

        for(var i = 0 ; ns.nodes.startNodes[i]; i++){
            var node = ns.nodes.startNodes[i];
            node.step = Math.pow(10, -ns.settings.timeDigits);
            node.onfocus = function(){
                fc.controller.inputCurrentTime(ns.nodes.soundNode,
                                               this,
                                               ns.settings.timeDigits);
            }
        }
        for(var i = 0; ns.nodes.stopNodes[i]; i++){
            var node = ns.nodes.stopNodes[i];
            node.step = Math.pow(10, -ns.settings.timeDigits);
            node.onfocus = function(){
                fc.controller.inputCurrentTime(ns.nodes.soundNode,
                                               this,
                                               ns.settings.timeDigits);
            }
        }
    };
    ns.updateWithKeys = function(e){
        if (!e) e = window.event;
        console.log("updateWithKeys called.");

        var focusNum = parseInt(ns.nodes.focusNumNode.value);
        if(e.ctrlKey && e.shiftKey){
            switch (e.keyCode) {
                case 13: ns.setTime2Node(ns.nodes.startNodes[focusNum-1]);
                         ns.resetFocus();
                         break;
                case 37: ns.nodes.soundNode.currentTime = 0;
                         break;
                case 39: ns.nodes.soundNode.currentTime =
                             ns.nodes.soundNode.duration;
                         break;
                default: break;
            }
        } else if(e.ctrlKey){
            console.log("ctrl key event");
            switch (e.keyCode) {
                case 13: var nodeList = [ns.nodes.stopNodes[focusNum-1],
                                         ns.nodes.startNodes[focusNum]];
                         ns.setTime2Nodes(nodeList);
                         ns.incFocusNum();
                         ns.resetFocus();
                         break;
                case 32: ns.nodes.soundNode.play();
                         break;
                case 37: ns.nodes.soundNode.currentTime =
                            Math.max(ns.nodes.soundNode.currentTime-5, 0);
                         break;
                case 39: ns.nodes.soundNode.currentTime =
                            Math.min(ns.nodes.soundNode.currentTime+5,
                                     ns.nodes.soundNode.duration);
                         break;
                case 81: ns.nodes.soundNode.pause();
                default: break;
            }
        }
    };
    ns.setTime2Node = function(timeNode){
        console.log(timeNode);
        fc.controller.inputCurrentTime(ns.nodes.soundNode,
                                       timeNode,
                                       ns.settings.timeDigits);
    };
    ns.setTime2Nodes = function(timeNodes){
        var curTime = fc.controller.getCurrentTime(ns.nodes.soundNode,
                                                   ns.settings.timeDigits);
        console.log("curTime = "  + curTime);
        console.log(timeNodes);
        for(var i = 0; i < timeNodes.length; i++){
            if(!timeNodes[i] || !timeNodes[i].value){
                continue;
            }
            console.log(timeNodes[i].value);
            timeNodes[i].value = curTime;
        }
    };
    ns.incFocusNum = function(){
        var focusNum = parseInt(ns.nodes.focusNumNode.value);
        if(focusNum < ns.nodes.focusNumNode.max){
            ns.nodes.focusNumNode.value = focusNum + 1;
        }
    };
    ns.resetFocus = function(){
        var focusNum = parseInt(ns.nodes.focusNumNode.value);
        ns.nodes.problemNodes[focusNum-1].focus();
    };
})(fc.musicEditor = fc.musicEditor || {});
