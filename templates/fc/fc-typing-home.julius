var fc = fc || {};
fc.thumbnail = fc.thumbnail || {};

(function(ns){
    ns.nodes = {
        popup: null,
        thumbnails: null,
        imgNode: null,
        musicNodes: {},
    };
    ns.focusId = -1;
    ns.init = function(){
        ns.nodes.$popup = $("#popup-thumbnail");
        ns.nodes.$popup.attr("y", ($(window).height()-ns.nodes.$popup.height())/2 + 25);
        ns.nodes.$popup.hide();

        ns.nodes.$thumbnails = $(".music-thumbnail");
        ns.nodes.$form = $("#game-form");
        ns.nodes.$inputId = $("#game-id");
        ns.nodes.$playBtn = $("#play-btn");
        ns.nodes.$cancelBtn = $("#cancel-btn");
        console.log(ns.nodes.$thumbnails);
        ns.nodes.$playBtn.on("click", function(){
            ns.doPost(ns.nodes.$form.attr("name"));
        });
        ns.nodes.$cancelBtn.on("click", function(){
            console.log(ns.focusId);
            console.log(ns.nodes.musicNodes[ns.focusId]);
            ns.nodes.musicNodes[ns.focusId].children(".game-sound").get(0).pause();
            ns.nodes.musicNodes[ns.focusId].hide();
            ns.focusId = -1;
            ns.nodes.$popup.hide();
        });
        ns.nodes.$thumbnails.on("click", function(){
            if(ns.focusId >= 0){
                console.log(ns.focusId);
                return;
            }
            var musicId = $(this).attr("data-id"),
                $musicContainer = ns.nodes.musicNodes[musicId];
            ns.focusId = musicId;
            ns.nodes.$inputId.attr("value", musicId);
            if($musicContainer){
                console.log($musicContainer);
                $musicContainer.show();
                $musicContainer.children(".game-sound").get(0).play();
                ns.nodes.$popup.show();
                return;
            }
            console.log("new element will be created");
            var musicInfo = ns.musicSrc[musicId],
                pictSrc = $(this).children()[0].getAttribute("src"),
                $musicNode = musicInfo.format === "Video" ?
                $("<video>"):
                $("<audio>");
            console.log(musicInfo);
            $musicNode.addClass("game-sound");
            $musicNode.attr("loop", true);
            $musicContainer = $("<div>"),
            $musicContainer.attr("id", "music-container-" + musicId);
            if(musicInfo.format !== "Video"){
                var $imgNode = $("<img>");
                $imgNode.attr("src", pictSrc);
                $musicContainer.append($imgNode);
            } else {
              $musicNode.attr("poster", pictSrc);
            }
            var $sourceNode = $("<source>");
            $sourceNode.attr("src", musicInfo.path);
            console.log("sourceNode" + $sourceNode);

            $musicNode.append($sourceNode);
            $musicContainer.append($musicNode);
            ns.nodes.musicNodes[musicId] = $musicContainer;

            $musicContainer.insertBefore("#game-form");
            ns.nodes.$popup.show();
            $musicNode.get(0).play();

            var ajaxOption = {
                url: "@{FCTypingResultR}",
                dataType: "json",
                data: {
                    "user": "true",
                    "musicid": musicId
                },
                success: function(data){
                    var $playInfoNode = $("<div>");
                        $headerNode = $("<p>");
                        $tableNode = $("<table>");
                    console.log(data);

                    var recordDefault = { played : 0,
                                          highest : 0.0,
                                          average : 0.0 };
                    var record = {};
                    if( data.records.length > 0 ){
                        console.log(data.records);
                        record.played = data.records.length;
                        var maxScore = 0.0, sum = 0.0;
                        for(var i = 0; i < data.records.length; i++){
                            maxScore = Math.max(maxScore, data.records[i].score);
                            sum += data.records[i].score;
                        }
                        record.highest = maxScore;
                        record.average = sum / record.played;
                    } else {
                        record = recordDefault;
                    }
                    $playInfoNode.attr("class", "play-info");
                    $headerNode.attr("class", "title");
                    $tableNode.attr("class", "table");
                    $headerNode.html("Your Play Data");
                    $tableNode.append(tableRow("Played", record.played));
                    $tableNode.append(tableRow("Highest", record.highest));
                    $tableNode.append(tableRow("Average", record.average));
                    $playInfoNode.append($headerNode);
                    $playInfoNode.append($tableNode);
                    $musicContainer.append($playInfoNode);
                }
            };
            $.ajax(ajaxOption);
            function tableRow(key, value){
                var $row = $("<tr>"),
                    $head = $("<th>"),
                    $data = $("<td>");
                $head.html(key);
                $data.html(value);
                $row.append($head);
                $row.append($data);
                return $row;
            }
        });

     //   ns.setThumnail();
    };
    ns.doPost = function(form){
        console.log("doPost called");
        console.log(form);
        var f = document.forms[form];
        ns.nodes.$inputId.attr("value", ns.focusId);
        f.submit();
        return true;
    };
})(fc.thumbnail = fc.thumbnail || {});

window.onload = function(){
    fc.thumbnail.init();
};